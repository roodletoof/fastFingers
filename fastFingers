#!/usr/bin/env python3

MY_RECORD = 49.35678182011802 # Must be a number and follow HIGH_SCORE_PATTERN regex
HIGH_SCORE_PATTERN = r"(?<=MY_RECORD = )[0-9\.]+"

WORD_FILE_URL = 'https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt'
WORD_SEPERATOR = ''' '''
TEST_DURATION_SECONDS = 60
NUMBER_OF_WORDS_PER_SENTENCE = 7

import curses
from curses import wrapper
from functools import cache
import random
import time
from sys import argv
from typing import Iterable
import requests
import re

SCRIPT_PATH = argv[0]

HIGH_SCORE_MESSAGE = '''
You got a new high score!
Your new highscore is {improvement} more wpm than the previous score!'''

def main(canvas: curses.window):
    curses.set_escdelay(1)
    curses.curs_set(0)

    while True:
        
        score = play_one_round(canvas)
        canvas.clear()
        canvas.addstr(f'You got a wpm of: {round( score, 1)}')
        
        previous_high_score = get_high_score()
        improvement = round(score - previous_high_score, 1)
        
        if score > previous_high_score:
        
            canvas.addstr(HIGH_SCORE_MESSAGE.format(improvement))
            set_high_score(score)
        
        else:
        
            canvas.addstr(f'\nYour score is {improvement} away from the high-score.')
        
        keep_playing_answer = blocking_input(
            canvas, 
            prompt = 'Do you wish to continue playing?', 
            valid_choices = ['continue', 'quit']
        )
        
        if keep_playing_answer == 'quit': break

def play_one_round(canvas: curses.window):
    KEY_BACKSPACE = 127
    KEY_ESCAPE = 27

    GREEN_BLACK = color_pair(curses.COLOR_GREEN, curses.COLOR_BLACK)
    WHITE_RED   = color_pair(curses.COLOR_WHITE, curses.COLOR_RED)

    target_text = get_next_target()
    current_text: list[str] = []

    curses.halfdelay(1)
    start_time = time.time()
    
    num_typed_entries = 0

    while True:
        canvas.clear()    

        matching_text, non_matching_text = get_matching_and_non_matching_text(
            ''.join(current_text),
            target_text
        )

        canvas.addstr(0, 0, target_text)
        canvas.addstr(0, 0, matching_text, GREEN_BLACK)
        canvas.addstr(non_matching_text, WHITE_RED)
        
        current_time = time.time() - start_time
        time_left = TEST_DURATION_SECONDS - current_time
        
        cursor_y, cursor_x = canvas.getyx()
        cursor_y += 2
        cursor_x = 0
        
        canvas.addstr(cursor_y, cursor_x, f'Time left: {round(time_left)}')

        if len(matching_text) == len(target_text): # they must be the same
            num_typed_entries += len(target_text)
            target_text = get_next_target()
            current_text.clear()
            continue

        char_code = canvas.getch()
        if char_code < 0: continue # no key was pressed
        
        if char_code == KEY_BACKSPACE:
            if len(current_text) == 0: continue
            current_text.pop()
            continue
        
        if char_code == KEY_ESCAPE:
            break
        
        current_text.append(chr(char_code))

        if time_left <= 0:
            break
    
    num_typed_entries += len(matching_text)
    score = (num_typed_entries / 5) / (current_time / 60)
    return score

def blocking_input(canvas: curses.window, prompt: str, valid_choices: list):
    '''
    Print a new line + given prompt on given curses.window.
    Print choices in a row, and let the user pick one with the arrow keys and enter.
    Returns the selected choice.
    '''
    KEY_ENTER = 10
    KEY_LEFT = 260
    KEY_RIGHT = 261

    current_selection_i = 0

    original_position = canvas.getyx()

    while True:
        canvas.move(*original_position)

        canvas.addstr('\n' + prompt + '\n')
        
        ch = canvas.getch()
        if ch == KEY_ENTER: return valid_choices[current_selection_i]

        x_dir = int(ch == KEY_RIGHT) - int(ch == KEY_LEFT)
        
        current_selection_i = ( current_selection_i + x_dir ) % len(valid_choices)
        
        non_selected_left_side = flexible_str_join(' ', valid_choices[0:current_selection_i])
        selected = str(valid_choices[current_selection_i])
        non_selected_right_side = ' ' + flexible_str_join(' ', valid_choices[current_selection_i+1:])

        if non_selected_left_side != '':
            non_selected_left_side += ' '


        canvas.addstr(non_selected_left_side)
        canvas.addstr(selected, curses.A_STANDOUT)
        canvas.addstr(non_selected_right_side)
        
def flexible_str_join(sep: str, items: Iterable) -> str:
    '''
    Joins an iterable with items of any type into a string using sep as a seperator.
    '''
    return sep.join( map( str, items ) )

WORDS = requests.get(WORD_FILE_URL).text.splitlines()
def get_next_target() -> str:
    return WORD_SEPERATOR.join(random.choice(WORDS).strip() for _ in range(NUMBER_OF_WORDS_PER_SENTENCE))

def get_high_score() -> float:
    with open(SCRIPT_PATH, 'r') as f:
        return float(re.findall(HIGH_SCORE_PATTERN, f.read())[0])

def set_high_score(new_high_score: float) -> None:
    with open(SCRIPT_PATH, 'r') as f:
        script_text = f.read()
    
    replacement_text = re.sub(HIGH_SCORE_PATTERN, str(new_high_score), script_text)
    
    with open(SCRIPT_PATH, 'w') as f:
        f.write(replacement_text)

def get_matching_and_non_matching_text(text: str, target: str) -> tuple[str, str]:
    
    matches = 0

    for i, ( char, target_char ) in enumerate( zip( text, target ) ):
        if char != target_char: break
        matches = i + 1
    
    return (text[0:matches], text[matches:])


current_color_pair_num = 0
@cache # applying decorator to not generate unnecessary amounts of color pairs
def color_pair(foreground: int, background: int) -> int:
    global current_color_pair_num
    current_color_pair_num += 1

    curses.init_pair(current_color_pair_num, foreground, background)
    return curses.color_pair(current_color_pair_num)

if __name__ == '__main__':
    wrapper(main)
